import sys


from grammairs import Grammair, fillGrammair

if __name__ == '__main__':

    TOFILETO = sys.argv[2]
    FROMFILETO = sys.argv[1]

    apalang = Grammair()

    r = [

        [['Программа'], ['НАЧАЛО', 'СписокБлоков', 'КОНЕЦ']],
        [['НАЧАЛО'], ['начало']],
        [['КОНЕЦ'], ['конец']],

        [['СписокБлоков'], ['Блок', 'СписокБлоков']],
        [['СписокБлоков'], ['Блок']],


        [['Блок'], ['Функция']],
        [['Блок'], ['Пока']],
        [['Блок'], ['Для']],
        [['Блок'], ['Если']],
        [['Блок'], ['Вызов', 'т']],
        [['Блок'], ['Выражение', 'т']],
        [['Блок'], ['Продолжить']],
        [['Блок'], ['Стоп']],
        [['Блок'], ['Ввод', 'т']],
        [['Блок'], ['Вывод', 'т']],
        [['Блок'], ['Вставить', 'т']],
        [['Блок'], ['ВЕРНУТЬ', 'ИМЯ', 'т']],

        [['Вставить'], ['Встав', 'Право', 'ВНУТРИ', 'ИМЯ']],
        [['Встав'], ['вставить']],

        [['Ввод'], ['ВВОД', 'ИМЯ']],
        [['Вывод'], ['ВЫВОД', 'ИМЯ']],

        [['ВВОД'], ['ввод']],
        [['ВЫВОД'], ['вывод']],


        [['Выражение'], ['Определение']],
        [['Выражение'], ['Объявление']],
        [['Выражение'], ['Присваивание']],

        [['Присваивание'], ['Лево', 'равно', 'Право']],
        [['Присваивание'], ['ВнутриСписка', 'равно', 'Право']],

        [['ВнутриСписка'], ['ИМЯ', 'ЛскбКВ', 'ИМЯ', 'ПскбКВ']],
        [['ВнутриСписка'], ['ИМЯ', 'ЛскбКВ', 'СписокЦифр', 'ПскбКВ']],

        [['равно'], ['=']],

        [['Лево'], ['ИМЯ']],


        [['Право'], ['Вызов']],
        [['Право'], ['Строчка']],
        [['Право'], ['ОпределениеСписка']],
        [['Право'], ['Подсчет']],
        [['Право'], ['Получить']],
        [['Право'], ['ИМЯ']],

        [['Получить'], ['ПОЛУЧИТЬ', 'СписокЦифр', 'ВНУТРИ', 'ИМЯ']],
        [['Получить'], ['ПОЛУЧИТЬ', 'ИМЯ', 'ВНУТРИ', 'ИМЯ']],

        [['ПОЛУЧИТЬ'], ['получить']],

        [['Определение'], ['Тип', 'ИМЯ']],

        [['т'], [';']],

        [['Тип'], ['Цел']],
        [['Тип'], ['Дроб']],
        [['Тип'], ['Строка']],
        [['Тип'], ['Список']],

        [['Цел'], ['ЦЕЛ']],
        [['Дроб'], ['ДРОБ']],
        [['Строка'], ['СТРОКА']],
        [['Список'], ['СПИСОК']],

        [['ЦЕЛ'], ['целое']],
        [['ДРОБ'], ['дробное']],
        [['СТРОКА'], ['строка']],
        [['СПИСОК'], ['список']],


        [['Объявление'], ['Тип', 'ИМЯ', 'равно', 'Право']],

        [['Пока'], ['ИМЯ', 'двточ', 'ПОКА', 'Право', 'ВЫПОЛН', 'СписокБлоков', 'ВСЕ']],

        [['ПОКА'], ['пока']],
        [['ВЫПОЛН'], ['выполнять']],
        [['ВСЕ'], ['все']],
        [['двточ'], [':']],


        [['Стоп'], ['СТОП', 'ИМЯ', 'т']], 

        [['СТОП'], ['стоп']],

        [['Продолжить'], ['ПРОДОЛЖИТЬ', 'ИМЯ', 'т']], 

        [['ПРОДОЛЖИТЬ'], ['продолжить']],

        [['Функция'], ['ФУНКЦИЯ', 'ИМЯ', 'Лскб', 'СписПарам', 'ВЫПОЛН', 'СписокБлоков', 'ВСЕ']],

        [['ФУНКЦИЯ'], ['функция']],
        [['ВЕРНУТЬ'], ['вернуть']],

        [['СписПарам'], ['ИМЯ', 'Пскб']],
        [['СписПарам'], ['ИМЯ', 'Запятая', 'СписПарам']],
        [['СписПарам'], ['Пскб']],

        [['СписПарамФ'], ['ИМЯ', 'Пскб']],
        [['СписПарамФ'], ['ИМЯ', 'Запятая', 'СписПарамФ']],
        [['СписПарамФ'], ['Пскб']],

        [['Вызов'], ['ИМЯ', 'Лскб', 'СписПарамФ']],

        [['Если'], ['ЕСЛИ', 'Право', 'ВЫПОЛН', 'СписокБлоков', 'ИНАЧЕ', 'СписокБлоков', 'ВСЕ']],
        [['Если'], ['ЕСЛИ', 'Право', 'ВЫПОЛН', 'СписокБлоков', 'ВСЕ']],
        

        [['ЕСЛИ'], ['если']],
        [['ИНАЧЕ'], ['иначе']],


        [['Для'], ['ИМЯ', 'двточ', 'ДЛЯ', 'ИМЯ', 'ДО', 'ИМЯ', 'ШАГ', 'ИМЯ', 'ВЫПОЛН', 'СписокБлоков', 'ВСЕ']],
        [['Для'], ['ИМЯ', 'двточ', 'ДЛЯ', 'ИМЯ', 'ВНУТРИ', 'ИМЯ', 'ВЫПОЛН', 'СписокБлоков', 'ВСЕ']],

        [['ДЛЯ'], ['для']],
        [['ДО'], ['до']],
        [['ШАГ'], ['шаг']],
        [['ВНУТРИ'], ['внутри']],

        [['Строчка'], ['Кавыч', 'СписокБукв', 'Кавыч']],
        [['Строчка'], ['ДвКавыч', 'СписокБукв', 'ДвКавыч']],
        [['Строчка'], ['ДвКавыч', 'ДвКавыч']],
        [['Строчка'], ['Кавыч', 'Кавыч']],

        [['СписокБукв'], ['Буква', 'СписокБукв']],
        [['СписокБукв'], ['Буква']],
        

        [['Кавыч'], ['\'']],
        [['ДвКавыч'], ['\"']],

        #Буква -> [аяАЯ09_]

        [['ОпределениеСписка'], ['ЛскбКВ', 'ПскбКВ']],
        [['ОпределениеСписка'], ['ЛскбКВ', 'СписокЭлементовСписка', 'ПскбКВ']],

        [['ЛскбКВ'], ['[']],
        [['ПскбКВ'], [']']],

        [['СписокЭлементовСписка'], ['ЭлементСписка']],
        [['СписокЭлементовСписка'], ['ЭлементСписка', 'Запятая', 'СписокЭлементовСписка']],

        [['ЭлементСписка'], ['ИМЯ']],
        [['ЭлементСписка'], ['Строчка']],
        [['ЭлементСписка'], ['Число']],

        [['Подсчет'] , ['Выр', 'сравнение', 'Выр']],
        [['Подсчет'] , ['Выр']],
        
        [['Выр']     , ['Лскб', 'Выр', 'Пскб', 'множить', 'Выр']],
        [['Выр']     , ['Лскб', 'Выр', 'Пскб']],
        [['Выр']     , ['Авыр', 'множить', 'Выр']],
        [['Выр']     , ['Авыр']],

        [['Авыр']     , ['Лскб', 'Авыр', 'Пскб', 'сложить', 'Выр']],
        [['Авыр']     , ['Лскб', 'Авыр', 'Пскб']],
        [['Авыр']     , ['ИМЯ', 'сложить', 'Выр']],
        [['Авыр']     , ['ИМЯ']],
        [['Авыр']     , ['Число']],

        [['ИМЯ']               , ['СписокСимволов']],

        [['СписокСимволов']    , ['Симв', 'Цифра', 'Цифра']],
        [['СписокСимволов']    , ['Симв', 'Цифра']],
        [['СписокСимволов']    , ['Симв']],

        [['Число'], ['сложить', 'СписокЦифр', 'точка', 'СписокЦифр']],
        [['Число'], ['СписокЦифр', 'точка', 'СписокЦифр']],
        [['Число'], ['сложить', 'СписокЦифр']],
        [['Число'], ['СписокЦифр']],
        
        [['СписокЦифр'], ['Цифра', 'СписокЦифр']],
        [['СписокЦифр'], ['Цифра']],

        [['точка'], ['.']],
        [['Запятая'], [',']],
        

        [['Лскб'], ['(']],
        [['Пскб'], [')']],

        [['сравнение'], ['==']],
        [['сравнение'], ['!=']],
        [['сравнение'], ['>=']],
        [['сравнение'], ['<=']],
        [['сравнение'], ['>']],
        [['сравнение'], ['<']],

        [['множить'], ['*']],
        [['множить'], ['/']],
        [['сложить'], ['+']],
        [['сложить'], ['-']],

        #нетерминалы переходят в терминалы
    ]


    n = [
        'Программа', 'СписокБлоков', 'Блок', 'Выражение',
        'Функция', 'Пока', "Для", "Если", "Стоп", "Определение",
        "Объявление", "Присваивание", "Лево", "равно", "т",
        "ИМЯ", "Право", "Подсчет", "Вызов", "СписокБукв",
        "Тип", "Цел", "Дроб", "Строка", "Список", "двточ", "ПОКА", "ВЫПОЛН", "ВСЕ", 
        "СТОП", "ФУНКЦИЯ", "Лскб", "СписПарам", "ВЕРНУТЬ", "Пскб", "Запятая",
        "СписПарамФ", "ЕСЛИ", "ИНАЧЕ", "ДЛЯ", "Число", "ДО", "ШАГ", "ВНУТРИ",
        "Кавыч", "Буква", "ДвКавыч", "ОпределениеСписка", "ЛскбКВ", "ПскбКВ",
        "СписокЭлементовСписка", "ЭлементСписка", "Выр", "множить", "Авыр", "сложить",
        "СписокСимволов", "Симв", "Цифра", "точка", "ЦЕЛ", "ДРОБ", "СТРОКА", "СПИСОК", "НАЧАЛО", "КОНЕЦ", "Строчка", 'СписокЦифр',
        'ПОЛУЧИТЬ', 'Получить', 'Вставить', 'Встав', 'сравнение', "Продолжить", "ПРОДОЛЖИТЬ", 'ВВОД', "ВЫВОД", "Ввод", "Вывод", 'ВнутриСписка'
    ]

    t = [
        '+', '-', '*', '/',
        '==', '<', '>', '<=', '>=', '!=', 
        '.', ')', '(', '=', ';', ':', ',',
        '\'', '\"', '[', ']', "пока", "выполнять", "все", "стоп", "функция", "вернуть",
        "если", "иначе", "для", "до", "внутри", "шаг", "целое", "дробное", "строка", "список", 
        "начало", "конец", "получить", 'вставить', "продолжить", "ввод", "вывод"
    ]

    s = 'Программа'

    fillGrammair(apalang, t, n, s, r)



    #Дополнить грамматику регулярками

    allSymbols = '0123456789'
    notAllSymbols = 'П'
    allNumbers = '0123456789'

    for lettr in allSymbols:
        apalang.setTerminal(lettr)

    apalang.setTerminal(notAllSymbols)

    #ВсеСимволы -> allSymbols

    for lettr in allSymbols:
        apalang.setRule(['ВсеСимволы'], [lettr])

    apalang.setNonTerminal('ВсеСимволы')

    #Симв -> notAllSymbols

    for lettr in notAllSymbols:
        apalang.setRule(['Симв'], [lettr])

    # Цифра -> allNumbers

    for lettr in allNumbers:
        apalang.setRule(['Цифра'], [lettr])

    #Буква -> lettersAll

    lettersAll = 'АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ0123456789_'

    for letter in lettersAll:
        apalang.setRule(['Буква'], [letter])
        if not letter in apalang.Terminals:
            apalang.setTerminal(letter)


    ftog = open('GRAMMAIR.txt', 'w')
    ftog.write(str(apalang))

    ftog.close()

    ReservedSymbols = apalang.Terminals.copy()

    from ATLcreate import LLRecursion, ATLTree, Rs, ATLNode, Rstr, Shstr

    from mytokenizator import GetTokensByFile

    tokens = GetTokensByFile(FROMFILETO, ReservedSymbols)

    if not tokens:
        raise Exception('Ошибка синтаксиса')

    tokensList = []
    bufferToTok = []
    tokenFlag = False
    tokenStartFlag = 0

    myTree = ATLTree()

    GMAP = apalang.convertToDict()

    if tokens[0] == 'начало' and tokens[-1] == 'конец':
        myroot = ATLNode('N', s)

        myNextLeft = ATLNode('T', 'начало')
        myNextLeft.Status = 'ready'

        myleft = ATLNode('N', "НАЧАЛО")
        myleft.Status = 'ready'
        myleft.Childrens = [myNextLeft]

        mycenter = None

        myNextRight = ATLNode('T', 'конец')
        myNextRight.Status = 'ready'

        myright = ATLNode('N', 'КОНЕЦ')
        myright.Status = 'ready'
        myright.Childrens = [myNextRight]



        myroot.Childrens = [myleft, mycenter, myright]
        myroot.Status = 'ready'
        myTree.Root = myroot
    else:
        myTree = None

    if myTree == None:
        raise Exception('Ошибка синтаксиса')


    if myTree:
        for ind in range(1, len(tokens) - 1):
            curtok = tokens[ind]

            if curtok == 'выполнять':
                tokenStartFlag += 1

            if tokenStartFlag > 0:
                if curtok == 'все':
                    tokenStartFlag -= 1
                    if tokenStartFlag == 0:
                        tokenFlag = True
            else:
                if curtok == ';':
                    tokenFlag = True

            bufferToTok.append(curtok)

            if tokenFlag:
                tokensList.append(bufferToTok)
                bufferToTok = []
                tokenFlag = False
            
                
    apalang.Start = 'Блок'

    miniATLTrees = []

    for miniTokens in tokensList:
        miniTree = LLRecursion(apalang, miniTokens)
        if miniTree:
            miniATLTrees.append(miniTree)
        else:
            raise Exception(f'Ошибка синтаксиса в строке{str(miniTokens)}')
            
    # myTree = LLRecursion(apalang, tokens) #3:00 / 0:26

    if len(miniATLTrees) > 1:
        bufNoda = ATLNode('N', 'списокБлоков')
        bufNoda.Status = 'ready'

        miniBufNoda = bufNoda

        for microTree in miniATLTrees[0: len(miniATLTrees) - 1]:
            megaNoda = ATLNode('N', 'списокБлоков')
            megaNoda.Status = 'ready'

            miniBufNoda.Childrens = [microTree.Root, megaNoda]

            miniBufNoda = megaNoda
            1+1

        miniBufNoda.Childrens = [ miniATLTrees[len(miniATLTrees) - 1].Root ]

        myTree.Root.Childrens[1] = bufNoda
    else:
        bufNoda = ATLNode('N', 'списокБлоков')
        bufNoda.Status = 'ready'
        bufNoda.Childrens = [miniATLTrees[0].Root]

        myTree.Root.Childrens[1] = bufNoda
        

    myTree.printTree()

    print(Rs(myTree.Root, apalang))




    from convertToJS import convertToJS

    convertedList = convertToJS(myTree)

    #jsText = "async function add(obj, l){ l.push(obj) };  async function getl(obj, l) { return l[obj] };  const readline = require('readline');  const rl = readline.createInterface({   input: process.stdin,   output: process.stdout }); const ВВОД = async () =>{for await (const line of rl) { return line} };  async function ВЫВОД (obj) { console.log(obj) } ;"
    jsText = "function add(obj, l){ l.push(obj) }; function getl(obj, l){ return l[obj] }; ВВОД =  () =>{ buf = prompt(); return buf}; function ВЫВОД (obj) { alert(obj) } ;"

    for funct in convertedList[1]:
        jsText += funct

    jsText+= convertedList[0]

    1+1

    htmlText = f'<!DOCTYPE html><html><head></head><body><script>{jsText}</script></body></html>'

    f = open('index.html', 'w', encoding='utf-8')

    f.write(htmlText)

    f.close()

    import os

    patchToHtmlFile = os.path.abspath("index.html")


    f = open(TOFILETO, 'w')

    batText = f'start "C:\Program Files\Google\Chrome\Application\chrome.exe" {patchToHtmlFile}'

    f.write(batText)

    f.close()