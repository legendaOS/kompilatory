from grammairs import *

# запишем грамматику G2 и присваивание в стиле Паскаля во внутреннее представление

g = Grammair()

p = [
    [['выражение'], ['арифметическоеВыражение', 'операцияОтношения','арифметическоеВыражение']],

    [['выражение'], ['арифметическоеВыражение']],

    [['арифметическоеВыражение'], ['арифметическоеВыражение', 'операцияТипаCложения', 'терм']],

    [['арифметическоеВыражение'], ['терм']],

    [['терм'], ['терм', 'операцияТипаУмножения', 'фактор']],

    [['терм'], ['фактор']],

    [['фактор'], ['var']],

    [['фактор'], ['const']],

    [['фактор'], ['(', 'арифметическоеВыражение', ')']],

    [['операцияОтношения'], ['<']],
    [['операцияОтношения'], ['<=']],
    [['операцияОтношения'], ['==']],
    [['операцияОтношения'], ['<>']],
    [['операцияОтношения'], ['>']],
    [['операцияОтношения'], ['>=']],

    [['операцияТипаCложения'], ['+']],
    [['операцияТипаCложения'], ['-']],

    [['операцияТипаУмножения'], ['*']],
    [['операцияТипаУмножения'], ['/']],

    [['программа'], ['блок']],

    [['блок'], ['begin', 'списокОператоров', 'end']],

    [['списокОператоров'], ['оператор']],

    [['списокОператоров'], ['списокОператоров', ';', 'оператор']],

    [['оператор'], ['идентификатор', '=', 'выражение']],

    [['оператор'], ['выражение']],

    [['идентификатор'], ['var']], 

    [['идентификатор'], ['const']]
]

n = [
    'выражение',
    'арифметическоеВыражение',
    'операцияОтношения',
    'операцияТипаCложения',
    'терм',
    'операцияТипаУмножения',
    'фактор',
    'программа', 
    'блок',
    'списокОператоров',
    'оператор',
    'идентификатор',
]

t = [
    'var',
    'const',
    '(', ')',
    '<', '<=', '==', '<>', '>', '>=', '+', '-', '*', '/',
    'begin',
    'end',
    '=',
    ';'
]

s = 'программа'

fillGrammair(g, t, n, s, p)

print(g)

# удалить левую рекурсию

deleteAllLeftRecursion(g)

print('-------------------------------------------------------')
print('-------------------------------------------------------')

print(g)

# попробуем разобрать примеры
# var + var
# const = var * ( var + var )

from ATLcreate import *


tokens1 = 'begin const = var + var ; const == ( var * var ) - const end'.split(' ')

MyTree1 = LLRecursion(g, tokens1, debug=True)


print('Дерево по токенам', tokens1)
if MyTree1:
    MyTree1.printTree()
else:
    print('невозможно построить')




